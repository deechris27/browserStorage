{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","db","Dexie","version","stores","posts","open","catch","err","console","log","useState","postTitle","setTitle","postContent","setContent","postFile","setFile","setPosts","useEffect","a","toArray","getPosts","deletePost","id","delete","postData","length","className","map","post","key","title","style","backgroundImage","file","content","onClick","onSubmit","e","preventDefault","add","then","type","name","onChange","target","value","position","left","marginTop","htmlFor","reader","FileReader","readAsDataURL","onload","result","getFile","files","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+OAgHeA,MA5Gf,WAEE,IAAMC,EAAK,IAAIC,IAAM,YAErBD,EAAGE,QAAQ,GAAGC,OAAO,CACnBC,MAAO,yBAGTJ,EAAGK,OAAOC,OAAM,SAACC,GACfC,QAAQC,IAAIF,MATD,MAYiBG,mBAAS,IAZ1B,mBAYNC,EAZM,KAYKC,EAZL,OAaqBF,mBAAS,IAb9B,mBAaNG,EAbM,KAaOC,EAbP,OAceJ,mBAAS,IAdxB,mBAcNK,EAdM,KAcIC,EAdJ,OAeaN,mBAAS,IAftB,mBAeNN,EAfM,KAeCa,EAfD,KAiBbC,qBAAU,YACM,uCAAG,4BAAAC,EAAA,sEACGnB,EAAGI,MAAMgB,UADZ,OACXhB,EADW,OAEfa,EAASb,GAFM,2CAAH,qDAKdiB,KACC,IAEL,IAoBMC,EAAU,uCAAG,WAAOC,GAAP,eAAAJ,EAAA,6DACjBnB,EAAGI,MAAMoB,OAAOD,GADC,SAECvB,EAAGI,MAAMgB,UAFV,OAEbhB,EAFa,OAGjBa,EAASb,GAHQ,2CAAH,sDAeVqB,EAAWrB,EAAMsB,OAAS,EAAI,yBAAKC,UAAU,kBAE3CvB,EAAMwB,KAAI,SAAAC,GACR,OAAO,yBAAKF,UAAU,OAAOG,IAAKD,EAAKE,OACrC,yBAAKC,MAAO,CAAEC,gBAAgB,OAAD,OAASJ,EAAKK,KAAd,QAC7B,4BAAKL,EAAKE,OACV,2BAAIF,EAAKM,SACT,4BAAQR,UAAU,SAASS,QAAS,kBAAMd,EAAWO,EAAKE,SAA1D,eAKV,yBAAKJ,UAAU,WACX,sEAWJ,OACE,yBAAKA,UAAU,OACb,0BAAMU,SA7DQ,SAACC,GAIjB,GAFAA,EAAEC,iBAEe,KAAd5B,GAAoC,KAAhBE,GAAmC,KAAbE,EAAgB,CAEzD,IAAIc,EAAO,CACPE,MAAOpB,EACPwB,QAAStB,EACTqB,KAAMnB,GAGVf,EAAGI,MAAMoC,IAAIX,GAAMY,KAAnB,sBAAwB,4BAAAtB,EAAA,sEAEFnB,EAAGI,MAAMgB,UAFP,OAEhBhB,EAFgB,OAGpBa,EAASb,GAHW,+CAkDxB,yBAAKuB,UAAU,WACb,wCACA,2BAAOe,KAAK,OAAOC,KAAK,QAAQC,SAbf,SAACN,GACtB1B,EAAS0B,EAAEO,OAAOC,WAchB,yBAAKnB,UAAU,WACb,0CACA,8BAAUgB,KAAK,UAAUC,SAbN,SAACN,GACxBxB,EAAWwB,EAAEO,OAAOC,WAclB,yBAAKnB,UAAU,UAAUK,MAAO,CAACe,SAAS,WAAYC,KAAK,MAAOC,UAAU,SAC1E,2BAAOC,QAAQ,QAAQvB,UAAU,SAAjC,iBACA,2BAAOe,KAAK,OAAOnB,GAAG,QAAQoB,KAAK,OAAOC,SAAU,SAAAN,GAAC,OA9C/C,SAACA,GACf,IAAIa,EAAS,IAAIC,WACjBD,EAAOE,cAAcf,EAAE,IACvBa,EAAOG,OAAQ,SAAChB,GACZtB,EAAQmC,EAAOI,SA0C8CC,CAAQlB,EAAEO,OAAOY,WAG5E,2BAAOf,KAAK,SAASI,MAAM,SAASd,MAAO,CAACiB,UAAU,OAAQS,WAAW,UAE1EjC,IC/FakC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdnE,OAAM,SAAAoE,GACLlE,QAAQkE,MAAMA,EAAMC,a","file":"static/js/main.7b5cf0b5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Dexie from 'dexie';\nimport './App.css';\n\nfunction App() {\n\n  const db = new Dexie(\"mytidbit\");\n\n  db.version(1).stores({\n    posts: \"title, content, file\"\n  });\n\n  db.open().catch((err) => {\n    console.log(err);\n  });\n\n  const [postTitle, setTitle] = useState(\"\");\n  const [postContent, setContent] = useState(\"\");\n  const [postFile, setFile] = useState(\"\");\n  const [posts, setPosts] = useState(\"\");\n\n  useEffect(() => {\n    const getPosts = async () => {\n      let posts = await db.posts.toArray();\n      setPosts(posts)\n    };\n\n    getPosts();\n  }, []);\n\nconst getPostInfo = (e) => {\n\n    e.preventDefault();\n\n    if(postTitle !== \"\" && postContent !== \"\" && postFile !== \"\"){\n\n        let post = {\n            title: postTitle,\n            content: postContent,\n            file: postFile\n        }\n       \n        db.posts.add(post).then(async () => {\n \n            let posts = await db.posts.toArray();\n            setPosts(posts);\n        });\n    }\n};\n\nconst deletePost = async (id) => {\n  db.posts.delete(id);\n  let posts = await db.posts.toArray();\n  setPosts(posts);\n};\n\nconst getFile = (e) => {\n  let reader = new FileReader();\n  reader.readAsDataURL(e[0]);\n  reader.onload= (e) => {\n      setFile(reader.result);\n  }\n};\n\n\n  let postData = posts.length > 0 ? <div className=\"postsContainer\">\n      {\n        posts.map(post => {\n          return <div className=\"post\" key={post.title}>\n            <div style={{ backgroundImage: `url(${post.file})` }} />\n            <h2>{post.title}</h2>\n            <p>{post.content}</p>\n            <button className=\"delete\" onClick={() => deletePost(post.title)}>Delete</button>\n          </div>\n        })\n      }\n    </div>\n: <div className=\"message\">\n      <p>Deepak....Il n'ya pas de posts........</p>\n    </div>\n\n    const handleSetTitle = (e)=>{\n      setTitle(e.target.value)\n    };\n\n    const handleSetContent = (e)=>{\n      setContent(e.target.value)\n    };\n  \n  return (\n    <div className=\"App\">\n      <form onSubmit={getPostInfo}>\n        <div className=\"control\">\n          <label>Title</label>\n          <input type=\"text\" name=\"title\" onChange={handleSetTitle} />\n        </div>\n        <div className=\"control\">\n          <label>Content</label>\n          <textarea name=\"content\" onChange={handleSetContent} />\n        </div>\n        <div className=\"control\" style={{position:'relative', left:'40%', marginTop:'10px'}}>\n          <label htmlFor=\"cover\" className=\"cover\">Choose a file</label>\n          <input type=\"file\" id=\"cover\" name=\"file\" onChange={e => getFile(e.target.files)} />\n        </div>\n\n        <input type=\"submit\" value=\"Submit\" style={{marginTop:'10px', marginLeft:'5px'}}/>\n      </form>\n      {postData}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}